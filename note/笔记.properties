参考文档：
    https://kdocs.cn/join/gt8ycec
参考文档：
https://www.cnblogs.com/shuiyj/p/13215978.html

1.第一步配置 ：Environment variables
ROCKETMQ_HOME=/Users/huangxiaogen/work/sourceTree1/rocketmq/rocketmq-nameserver
2.第二步启动
启动nameserver - broker -producter - consumer
org.apache.rocketmq.namesrv.NamesrvStartup.main
3.启动
brokerstart

3.启动producer
    报错： No route info of this topic: TopicTest
    解决方法：参考这个链接
    https://blog.csdn.net/a241903820/article/details/86610003
    执行命令
    执行报错：nohup sh distribution/bin/mqbroker -n localhost:9876 autoCreateTopicEnable=true

        ERROR: Please set the JAVA_HOME variable in your environment, We need java(x64)! !!
6。解决办法：设置rocketmq的环境变量
    https://www.jianshu.com/p/be8f1e0509c3

7.设置Java_Home
    查看jdk的安装目录
    https://blog.csdn.net/caoxiaohong1005/article/details/73611424/
    设置环境变量
    https://www.jianshu.com/p/c026fbdb35ea

8.在启动 NameServer 时，可以先使用.／ qnames rv -c configFile -p打印当前加载的配置属性

9.如果代码中使用了线程池，一种优雅停机的方式就是注册一个JVM 钩子函数，在JVM 进程关闭之前，先将线程池关闭，及时释放资源;
    参考：
        org.apache.rocketmq.namesrv.NamesrvStartup.start
    参考链接：https://www.shuzhiduo.com/A/kjdw07oEzN/
第二章
    RocketMQ 路由中心 NameServer
        10.nameserver的作用：
            NameServer 要作用是为消息生产者 消息消费者提供关于主题 Topic 的路由信息，
            那么 NameServer 要存储路由的基础信息，，还要能够管理 Broker 节点，包括路由注册，路由删除等功能
            参考：org.apache.rocketmq.namesrv.routeinfo.RoutelnfoManager

        11.定时任务：
            定时任务 I: NameServer 每隔 Os 扫描一次 Broker 移除处于不激活状态的 Broker
            定时任务 2: names rver 每隔 10 分钟打印一次 KV配置

        12.RocketMQ 基于订阅发布机制
                一个 Topic 拥有多个消息队 ，一个Broker 为每一主题默认创建4个读队列4个写队列。
                多个 Broker 组成一个集群 BrokerName 由相同的多台 Broker组成master-slave架构，brokerId为0代表Master，大于0表示slave。
                BrokerLivelnfolastUpdateTimestamp 存储上次收到 Broker 心跳包的时间

        13.重置mq发送消息的话，需要考虑下游的负载能力
            可以讲下出现的问题，重置了一天的数据导致，下游消费慢，实时数据被阻塞；

        14.路由注册
            RocketMQ 路由注册是通过 Broker Name Server 的心跳功能实现的

        15.网络跟踪方法
            每一个请求，rocketmq都会定义一个RequestCode，然后在服务端会对应相应的网络处理器（processor包中），只需整库搜索RequestCode即可找到相应的处理逻辑；

            RequestCode.REGISTER_BROKER
        16.网络处理器解析请求类型:
            1.org.apache rocketmq.namesrv processor.DefaultRequestProcessor 网络处理器解析请求类型
            2.如果请求类型为 RequestCode REGISTER_BROKER ，则请求最终转发到 RoutelnfoManager#registerBroker
        17设计亮点：使用了读写锁
            参考代码：org.apache.rocketmq.namesrv.routeinfo.RouteInfoManager.registerBroker
                Name Serve与Broker 保持长连接， Broker 状态存储在 brokerLiveTable 中，NameServer 每收到一个心跳包，将更新 brokerLiveTable 中关于 Broker 的状态信息以及路
                由表（ topicQueueTable brokerAddrTab le brokerLiveTabl filterServerTable ）。更新上述路由表（HashTable ）使用了锁粒度较少的读写锁，允许多个消息发送者（ producer ）并发读，
                保证消息发送时的高并发 但同一时刻 NameServer 只处理一个 Broker 心跳包，多个心跳包请求串行执行 这也是读写锁经典使用场景，更多关于读写锁的信息，可以参考笔者的
                博文 http://blog.csdn.net/prestigeding/article/details/53286756 。

        17.路由删除，两个触发点删除路由信息
            1.NameServer 时扫描 brokerLiveTable 检测上次心跳包与当前系统时间的时间差，如果时间戳大于 120s ，则需要移除 Broker 信息
            参考：org.apache.rocketmq.namesrv.NamesrvController.initialize

            2.  Broker 在正常被关闭的情况下，会执行 unr gisterBroker 令。
            参考：
                1.org.apache.rocketmq.broker.BrokerController.shutdown
        18.路由发现
            RocketMQ 路由发现是非实时的，当 Topic 路由出现变化后， NameServer 不主动推送给客户端，而是由客户端定时拉取主题最新的路由
            nameserver的实现类是：
                参考这个类：
                    org.apache.rocketmq.namesrv.processor.DefaultRequestProcessor.processRequest
                    org.apache.rocketmq.namesrv.processor.DefaultRequestProcessor.getRouteInfoByTopic
        19.问题：
            NameServer 需要等 Broker 失效至少 120s 才能将该 Broker 从路由表中移除掉，那
            如果在 Broker 故障期间，消息生产者 Producer 根据主题获取到的路由信息包含已经看机的
            Broker ，会导致消息发送失败，那这种情况怎么办，岂不是消息发送不是高可用的？让我
            们带着这个疑问进入 RocketMQ 消息发送的学习

第三章：
    RocketMQ 消息发送
    20。rocketMQ消息发送的三种实现方式
        RocketMQ 发送普通消息有 种实现方式：可靠同步发送 可靠异步发送 单向(Oneway）发送
        同步：发送者向 MQ 执行 送消息 API 时，同步等待， 到消息服务器返回发送结果
        异步：发送者向 MQ 执行发送消息 API 时，指定消息发送成功后的回掉函数，然后调用消息发送 API 后，立即返回，消息发送者线程不阻 ，直到运行结束，消息发送成功或失败的回调任务在 个新的线程中执行
        单向：消息发送者向 MQ 执行发送消息 API时，直接返回，不 待消息服务器的结果，也不注册回调函数，简单地说，就是只管发，不在乎消息是否成功存储在消息服务器上
    21.注意:RocketMQ 消息发送 要考虑以下几个问题
        1.消息队列如何进行负载?
        2.消息发送如何实现高可用？
        3.批量消息发送如何实现一致性

    23.认识 RocketMQ 消息
        RocketMQ 消息封装类是 org.apache.rocketmq common.message.Message
            Message 的基础属性主要包括消息所属主题 topic 消息 Flag(RocketMQ 不做处理）、扩展属性、消息体
                Message 扩展属性主要包含下面几个
                    tag ：消息 TAG ，用于消息过滤
                    keys: Message 索引键， 多个用空格隔开， RocketMQ 可以根据这些 key 快速检索到消息
                    waitStoreMsgOK ：消息发送时是否等消息存储完成后再返回
                    delayTimeLeve 消息延迟级别，用于定时消息或消息重试
                    这些扩展属性存储在 Message 的properties中
    24.生产者启动流程：
        1.：检查 productGroup 是否符合要求；并改变生产者 instanceName 为进程 ID
            org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.start(boolean)
        2.创建MQClienntlnstance 实例。整个JVM实例中只存在一个MQClientManager实例，维护 MQClientlnstance缓存表 ConcurrentMap<String ， MQClientinstance>
            factoryable =new ConcurrentHashMap<String，MQClientInstance＞（），也就是同一个 clientId，只会创建建一个 MQClientInstance。代码清单3-6是创建 clientld的方法
            参考代码：
                org.apache.rocketmq.client.impl.MQClientManager.getOrCreateMQClientInstance(org.apache.rocketmq.client.ClientConfig, org.apache.rocketmq.remoting.RPCHook)
            注意：
             MQClientlnstance 封装了 RocketMQ 网络处理 API ，是消息生产者（ Producer ）、消息消费者 (Consumer ）与 NameServer Broker 打交道的网络通道
        3.向 MQClientlnstance 注册，将当前生产者加入到 MQClientlnstance 管理中，方便后续调用网络请求、进行心跳检测等
        4.启动 QClientlnstance ，如果 MQC!ientlnstance已经启动 ，则本次启动不会真正执行 MQClientlnstance 启动过程将在第五章讲解消息消费有详细的介绍
    25.消息发送基本流程
        主要流程：
            1.验证消息
                消息发送之前，首先确保生 者处于运行状态，然后验证消息是否符合相应的规范，
                具体的规范要求是主题名称 消息体不能为空 消息长度不能等于0且默认不能超过允许发送消息的最大长度4M(maxMessageSize=l024 * 1024 *4）
            2.查找路由
                消息发送之前，首先需要获取主题的路由信息，只有获取了这些信息我们才知道消息要发送 具体 Broker节点
                参考方法：
                    org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendDefaultImpl
                    org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.tryToFindTopicPublishInfo
                        1.是查找主题的路由信息的方法
                        2.如果生产者 缓存了 topic的路由信息，如果该路由信息中包含了消息队列，则直接返回该路由信息
                        3.如果没有缓存或没有包含消息队列， 则向 nameServer 查询该 topic 路由信息
                        org.apache.rocketmq.client.impl.factory.MQClientInstance.updateTopicRouteInfoFromNameServer(java.lang.String, boolean, org.apache.rocketmq.client.producer.DefaultMQProducer)
            这个方法的功能是消息生产者更新和维护路由 缓存，具体代码如下

                   4.如果最终未找到路由信息，则抛出异常 无法找到主题相关路由信息异常

                包含异常处理机制）
                    默认消息发送以同步方式发送，默认超时时间 3s（下面不是故障延迟发送的）
                    选择的broker中的队列如果有问题的话怎么办，重新选择一个
                            首先在一次消息发送过程中，可能会多次执行选择消息队列这个方法， lastBrokerName
                            就是上 次选择的执行发送消息失败的 Broker 第一次执行消息队列选择时，
                            lastBrokerName为null ，此时直接 sendWhichQueue 自增再获取值与当前路由中消息
                            队列个数取模， 返回该位置 MessageQueue(selectOneMessageQueue（） 方法），如果消息发
                            送再失败的话，下次进行消息队列选择时规避上次 MesageQueue 在的 Broker 则还很有可能再次失败
                    如果broker有问题的话，怎么办：
                        该算法在一次消息发送过程中能成功规避故障的 Broker，但如果 Broker 若机，由于路由算法中的消息队 是按 Broker 排序的，如果上一次根据路由算法选择的是若机的 Broker的
                        第一个队列 ，那么随后的 下次选择的是若 Broker 第二个队列，消息发送很有可能会失败，再次引发重试，带来不必要的性能损耗，那么有什么方法在一次消息发送失败后，
                        暂时将该 Broker 排除在消息队列选择范围外呢？或许有朋友会问， Broker 不可用 ，路由信息中为什么还会包含该 Broker的路由信息呢？其实这不难解释：
                        首先， NameServer检测Broker 是否可用是有延迟的，最短为一次心跳检测间隔（ Os ）； 其次， NameServer检测到 Broker 宕机后马上推送消息给消息生产者，而是消息生产者每隔 30s 更新一次路由
                        信息，所以消息生产者快感知 Broker 最新的路由信息也需要 30s 如果能引人一种机制，Broker 机期间，如果一次消息发送失败后，可以将该 Broker 暂时排除在消息队列的选择范围中
                3.消息发送
                    参考这个方法：
                        org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl.sendKernelImpl
                    消息发送参考博客：
                        https://www.cnblogs.com/k-blog/p/12896206.html


第四章：
    消息存储：
        21。从存储方式和效率来看，文件系统高于 KV 存储， KV 存储又高于关系型数据库，直接操作文件系统肯定是最快的，但可靠性却是最低的，而关系型数据库的性能和可靠性与文件系统恰恰相反
1.RocketMQ 存储概要设计；
    broker.conf文件
        # 运行目录的store目录
        storePathRootDir=/Users/bjhl/IdeaProjects/rocketmq/rocketmq-nameserver/store
        # commitLog的存储路径
        storePathCommitLog=/Users/bjhl/IdeaProjects/rocketmq/rocketmq-nameserver/store/commitlog
            解释：
                消息存储文件，所有消息主题的消息都存储在 CommitLog 文件中
            扩展：
                Commitlog 文件存储 为$｛ROCKET_HOME }/ store commitlog 录，每一个文件默认lG，
                    1.一个文件写满后再创建另外一个，以该文件中第一个偏移量为文件名，偏移量小于20 位用0补齐
                    例子：
                        第一个文件的初始偏移量为0；第二个文件是1073741824，代表该文件中的第一条消息的物理偏移量为1073741824 ，这样根据物理偏移量能快速定位到消息
                    2.MappedFileQueue 可以 是$｛ROCKET_HOME }/store/commitlog 文件夹，而MappedFile 则对应该文件夹下一个个的文件
                    参考方法：
                        org.apache.rocketmq.store.CommitLog.putMessage
                    3.注意：
                        在写入 CornrnitLog 之前，先申请 putMessageLock ，也就是将消息存储到CornrnitLog 文件中是串行的
                    4. 如果rnappedFile 空，表明$ {ROCKET_HOME}/store/cornrnitlog 目录下不存在任何文件,说明本次消息是第一次消息发送，用偏移量 创建第一个 commit 文件，\
                         文件为 00000000000000000000，如果文件创建失败，抛出 CREATE MAPEDFILE FAILED ，很有可 是磁盘空间不足或权限不够.
                    5.将消息追加到MappedFile中， 首先先获取 MappedFile 当前写指针，如果currentPos 大于或等于文件大小则 明文件已写满，抛出 AppendMessageStatus. UNKNOWN_ERROR
                        如果 currentPos 小于文件大小，通过 slice （）方法创建一个与 MappedFile 的共享内存区，并设置 position 为当前指针
                    6.创建全局唯一消息 ID ，消息 ID有16 字节，消息 ID 组成如图 4-4 所示
                        扩展：
                            可以通过 UtilAll.bytes2string 方法将 msgld 字节数组转换成字符串，可以通过 Uti1All .stri ng2bytes 方法将 msgld
                            字符串还原成 16 字节的字节数组，从而根据提取消息偏移 ，可以快速通过 msgld 找到消息内容
                    7.获取该消息在消息队列的偏移量， CommitLog 中保存了当前所有消息队列的当前待写入偏移量
                        参考：
                            org.apache.rocketmq.store.CommitLog.DefaultAppendMessageCallback.doAppend(long, java.nio.ByteBuffer, int, org.apache.rocketmq.store.MessageExtBrokerInner)
                    8.根据消息、体的长度 主题的长度、属性的长度结合消息存储格式计算消息的总长度
                        参考方法：org.apache.rocketmq.store.CommitLog.calMsgLength

                    9.如果消息长度＋END FILE_ MIN_ BLANK_ LENGTH 大于 CommitLog 文件的空闲空间，则返回 AppendMessageStatus.END_OF_FILE
                      Broker 会重新创建一个新的CommitLog 文件来存储该消息,从这里可以看出，每个 CommitLog 文件最少会空 个字
                        节，高 字节存储当前文件剩余空间，低 字节存储魔数 CommitLog.BLANK MAGIC CODE
                        参考文章：
                            https://www.modb.pro/db/72473
                    10。将消息内容存储到 ByteBuffer 中，然后创建 AppendMessageResult 这里只是将消息存储在 MappedFile 应的内存映射 Buffer ，并没有刷写到磁盘，
                    11。更新消息队列逻辑偏移量
                    12.处理完消息追加逻辑后将释放putMessageLock锁
                    13.DefaultAppendMessageCallback#doAppend 是将消息追加在内存中， 需要根据是同步刷盘还是异步刷盘方式，将内存中的数据持久化到磁盘，关于刷盘操作后面会详
                        细介 然后执行 HA 主从同步复制


        # consume queue文件的存储路径
        storePathConsumeQueue=/Users/bjhl/IdeaProjects/rocketmq/rocketmq-nameserver/store/consumequeue
            解释：
                RocketMQ 将所有主题的消息存储在同一个文件 ，确保消息发送时顺序写文件，尽最大的能力确保消息发送的高性能与高吞吐量。
                    缺点：
                        但由于消息中间件一般是基于消息主题的订阅机制，这样便给按照消息主题检索消息带来了极大的不便
                    方法：
                        RocketMQ 引入了 ConsumeQueue 消息队列文件，每个消息主题包含多个消息消费队列，每 个消息队列有一个消息文件
                    设计理念：
                        IndexFile 索引文件，其主要设计理念就是为了加速消息的检索性能，根据消息的属性快速从 Commitlog 文件中检索消息
                注意：
                    RocketMQ 是一款高性能的消息中间件，存储部分的设计是核心，存储的核心是 IO 访问性能，本章也会重点剖析 RocketMQ 是如何提高 IO 访问性能的
                流程：
                    消息消费队列，消息到达 CommitLog 文件后，将异步转发到消息消费队列，供消息消费者消费

        # 消息索引文件的存储路径
        storePathIndex=/Users/bjhl/IdeaProjects/rocketmq/rocketmq-nameserver/store/store/index
            解释：
                消息索引文件，主要存储消息 Key Offset 的对应关系
        # checkpoint文件的存储路径
        storeCheckpoint=/Users/bjhl/IdeaProjects/rocketmq/rocketmq-nameserver/store/checkpoint
        # abort文件的存储路径
        abortFile=/Users/bjhl/IdeaProjects/rocketmq/rocketmq-nameserver/store/abort
    RocketMQ 消息存储设计原理图
        1 ) CommitLog ：消息存储文件，所有消息主题的消息都存储在 CommitLog 文件中
        2 ) ConsumeQueue ：消息消费队列，消息到达 CommitLog 文件后，将异步转发到消息消费队列，供消息消费者消费
        3 ) IndexFile ：消息索引文件，主要存储消息 Key Offset 的对应关系
        4 ）事务状态服务 存储每条消息的事务状态
        5 ）定时消息服务：每一个延迟级别对应一个消息消费队列，存储延迟队列的消息拉取进度

2.消息发送存储流程；
    消息存储类：org.apache.rocketmq .store.DefaultMessageStore：
        它是存储模块里面最重要一个类，包含了很多对存储文件操作的 API，其他模块对实体的操作都是通过DefaultMessageStore 进行操作

                //消息存储配置属性
                private final MessageStoreConfig messageStoreConfig;
                // CommitLog
                // CommitLog 文件的存储实现类
                private final CommitLog commitLog;

                //消息队列存储缓存表，按消息主题分组
                private final ConcurrentMap<String/* topic */, ConcurrentMap<Integer/* queueId */, ConsumeQueue>> consumeQueueTable;
                //：消息队列文件 ConsumeQueue刷盘线程
                private final FlushConsumeQueueService flushConsumeQueueService;
                //清除 CommitLog 文件服务
                private final CleanCommitLogService cleanCommitLogService;
                //清除 ConsumeQueue 文件服务
                private final CleanConsumeQueueService cleanConsumeQueueService;

                //索引文件实现类
                private final IndexService indexService;
                //MappedFile 分配服务
                private final AllocateMappedFileService allocateMappedFileService;
                // CommitLog 消息分发，根据 CommitLog文件构建 ConsumeQueue IndexFile 文件
                private final ReputMessageService reputMessageService;
                //存储 HA 机制
                private final HAService haService;

                private final ScheduleMessageService scheduleMessageService;

                private final StoreStatsService storeStatsService;
                //消息堆内存缓存
                private final TransientStorePool transientStorePool;

                private final RunningFlags runningFlags = new RunningFlags();
                private final SystemClock systemClock = new SystemClock();

                private final ScheduledExecutorService scheduledExecutorService =
                Executors.newSingleThreadScheduledExecutor(new ThreadFactoryImpl("StoreScheduledThread"));
                private final BrokerStatsManager brokerStatsManager;
                //消息拉取长轮 模式消息达到监听器
                private final MessageArrivingListener messageArrivingListener;
                //Broker配置属性
                private final BrokerConfig brokerConfig;

                private volatile boolean shutdown = true;
                //文件刷盘检测点
                private StoreCheckpoint storeCheckpoint;

                private AtomicLong printTimes = new AtomicLong(0);
                //CommitLog 文件转发请求
                private final LinkedList<CommitLogDispatcher> dispatcherList;
3.存储文件组织与内存映射机制；
    RocketMQ 通过使用内存映射文件来提高 IO 访问性能：
        无论是 CommitLog ，ConsumeQueue还是 IndexFile ，单个文件都被设计为固定长度。
        如果一个文件写满以后再创建一个新文件，文件名就为该文件第一条消息对应的全局物理偏移量
    MappedFileQueue 映射文件队列：
        MappedFileQueue 是MappedFile的管理容器，MappedFileQueue是对存储目录的封装，例如 CommitLog 文件的存储路径$｛ROCKET_HOME} store commitlog ，
        该目录下会存在多个内存映射文件（MappedFile）
    MappedFile 内存映射文件：
    1. MappedFile 初始化
    参考方法：org.apache.rocketmq.store.MappedFile.init(java.lang.String, int, org.apache.rocketmq.store.TransientStorePool)
        根据是否开启 transientStorePoo!Enable 在两种初始化情况 transientStorePoolEnable
        true 表示内容先存储在堆外内存，然后通过 Commit 线程将数据提交到内存映射 uffer
        中，再通过 Flush 线程将内存映射 Buffer 中的数据持 化到磁盘中
    2. MappedFile 交（commit)
        参考方法：
            执行提交操作， commitLeastPages 为本次提交最小的页数，如果待提交数据不满
            commitLeastPages ，则不执行本次提交操作，待下次提交 writeBuff1 如果为空，直接返回
            wrotePosition 指针 ，无须执行 commit 操作， commit 操作主体 riteBuffer
        ByteBuffer 使用技巧 slice （） 方法创建 个共享缓存区 与原先的 ByteBuffer 共享内存
        但维护一套独立的指针 position mark limit
    3. MappedFile 刷盘（flush)
        刷盘指的是将内存中的 据刷写到磁 ，永久存储在磁盘中，其具体 现由
        MappedFile flush 方法实现，
    4. 获取 Mapped File 最大读指针（ getReadPosition)



4.RocketMQ存储文件；
5.消息消费队列，索引文件构建机和制；
6.RocketMQ文件恢复机制；
7.RocketMQ刷盘机制；
8.RocketMQ文件删除机制；

9消费消息的高可用：
    1.在Consumer的配置文件中，并不需要设置是从Master读还是从Slave 读，当Master不可用或者繁
        忙的时候，Consumer会被自动切换到从Slave读。
    2.有了自动切换Consumer这种机制，当一个Master角色的机器出现故障后，Consumer仍然可以从
        Slave读取消息，不影响Consumer程序。
10。消息发送高可用：
    1.在创建Topic的时候，把Topic的多个Message Queue创建在多个Broker组上（相同Broker名称，
        不同brokerId的机器组成一个Broker组），这样既可以在性能方面具有扩展性，也可以降低主节点故障
        对整体上带来的影响，而且当一个Broker组的Master不可用后，其他组的Master仍然可用，Producer
        仍然可以发送消息的。
    2.RocketMQ目前还不支持把Slave自动转成Master，如果机器资源不足，需要把Slave转成Master。
        1. 手动停止Slave角色的Broker。
        2. 更改配置文件。
        3. 用新的配置文件启动Broker。
    3.RocketMQ 在 2018 年底迎来了一次重大的更新，引入 Dledger，增加了一种全新的复制方式。
        Dledger 在写入消息的时候，要求至少消息复制到半数以上的节点之后，才给客户端返回写入成
        功，并且它是支持通过选举来动态切换主节点的。
11.同步刷盘和异步刷盘：
    同步刷盘：
        (1). 写入 PageCache后，线程等待，通知刷盘线程刷盘。
        (2). 刷盘线程刷盘后，唤醒前端等待线程，可能是一批线程。
        (3). 前端等待线程向用户返回成功
    异步刷盘：
        写完 PageCache直接返回
    问题：
        会不会出现内存溢出的情况：
        不会，原因如下：
            1.写入消息到 PageCache时，如果内存不足，则尝试丢弃干净的 PAGE，腾出内存供新消息使
                用，策略是LRU 方式。
            2.如果干净页不足，此时写入 PageCache会被阻塞，系统尝试刷盘部分数据，大约每次尝试 32
                个 PAGE , 来找出更多干净 PAGE。
12.idea源码分析查看类层次结构图：
    https://www.jianshu.com/p/3bfcaeaf017b
    IDEA中查看类继承图和类源码的骚操作
        https://www.jianshu.com/p/da0f912238e2
13.Consumer端负载均衡的核心
    参考类：
        org.apache.rocketmq.client.impl.consumer.RebalanceImpl.doRebalance
14.解决问题处理 github 不允许上传超过 100MB 文件的问题
    http://www.liuxiao.org/2017/02/git-%E5%A4%84%E7%90%86-github-%E4%B8%8D%E5%85%81%E8%AE%B8%E4%B8%8A%E4%BC%A0%E8%B6%85%E8%BF%87-100mb-%E6%96%87%E4%BB%B6%E7%9A%84%E9%97%AE%E9%A2%98/
15。IDEA新建本地项目关联远程git仓库
    https://www.cnblogs.com/wuxun1997/p/11270811.html
16.IntelliJ IDEA导入项目报错: Invalid Gradle JDK configuration found.
    https://blog.csdn.net/yinxing2008/article/details/88979813
12. 启动rocketmq控制台：
    https://www.cnblogs.com/shuiyj/p/13200658.html
18.RocketMQ consumer启动流程
    https://blog.csdn.net/qq_38082304/article/details/113483066

